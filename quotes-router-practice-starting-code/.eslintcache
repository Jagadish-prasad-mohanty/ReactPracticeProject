[{"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\index.js":"1","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\App.js":"2","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\quotes\\QuoteList.js":"3","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\quotes\\QuoteItem.js":"4","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\quotes\\QuoteForm.js":"5","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\UI\\Card.js":"6","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\UI\\LoadingSpinner.js":"7","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\quotes\\HighlightedQuote.js":"8","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\quotes\\NoQuotesFound.js":"9","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\pages\\AllQuotes.js":"10","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\pages\\NewQuote.js":"11","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\pages\\QuoteDetails.js":"12","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\comments\\Comments.js":"13","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\comments\\NewCommentForm.js":"14","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\layout\\MainNavigation.js":"15","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\layout\\Layout.js":"16","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\pages\\NoQuote.jsx":"17","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\hooks\\use-http.js":"18","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\lib\\api.js":"19","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\comments\\CommentsList.js":"20","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\comments\\CommentItem.js":"21"},{"size":220,"mtime":1629269593313,"results":"22","hashOfConfig":"23"},{"size":1626,"mtime":1631125100640,"results":"24","hashOfConfig":"23"},{"size":1494,"mtime":1630941555436,"results":"25","hashOfConfig":"23"},{"size":933,"mtime":1629442620161,"results":"26","hashOfConfig":"23"},{"size":1656,"mtime":1630048986876,"results":"27","hashOfConfig":"23"},{"size":156,"mtime":1616580372000,"results":"28","hashOfConfig":"23"},{"size":167,"mtime":1616580372000,"results":"29","hashOfConfig":"23"},{"size":463,"mtime":1631168265983,"results":"30","hashOfConfig":"23"},{"size":687,"mtime":1629447417341,"results":"31","hashOfConfig":"23"},{"size":1075,"mtime":1630755367753,"results":"32","hashOfConfig":"23"},{"size":762,"mtime":1630050107695,"results":"33","hashOfConfig":"23"},{"size":1905,"mtime":1630763798293,"results":"34","hashOfConfig":"23"},{"size":1647,"mtime":1630956064702,"results":"35","hashOfConfig":"23"},{"size":2065,"mtime":1630953486730,"results":"36","hashOfConfig":"23"},{"size":649,"mtime":1631168760361,"results":"37","hashOfConfig":"23"},{"size":352,"mtime":1629297125519,"results":"38","hashOfConfig":"23"},{"size":175,"mtime":1629443372655,"results":"39","hashOfConfig":"23"},{"size":2429,"mtime":1630755074216,"results":"40","hashOfConfig":"23"},{"size":4482,"mtime":1630953573477,"results":"41","hashOfConfig":"23"},{"size":350,"mtime":1630954147553,"results":"42","hashOfConfig":"23"},{"size":362,"mtime":1630954353650,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q3ct26",{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\index.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\App.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\quotes\\QuoteList.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\quotes\\QuoteItem.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\quotes\\QuoteForm.js",["92"],"import { useRef, useState } from 'react';\nimport { Prompt, useHistory } from 'react-router-dom';\nimport Card from '../UI/Card'\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const [isFocus,setIsFocus] =useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n \n  function submitFormHandler(event) {\n    event.preventDefault();\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n   \n  }\n\n  const onFormFocusHandler = () =>{\n    setIsFocus(true);\n  }\n  const finishFocusHandler= ()=>{\n    setIsFocus(false)\n  }\n  return (\n    <Card>\n    <Prompt when={isFocus} message={(location)=>\"Wanna Go\"}/>\n      <form \n      onFocus={onFormFocusHandler} \n      className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Author</label>\n          <input type='text' id='author' ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Text</label>\n          <textarea id='text' rows='5' ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button onClick={finishFocusHandler} className='btn'>Add Quote</button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default QuoteForm;\n","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\UI\\Card.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\UI\\LoadingSpinner.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\quotes\\HighlightedQuote.js",["93"],"import { useParams } from 'react-router-dom';\nimport classes from './HighlightedQuote.module.css';\n// import { Redirect } from 'react-router';\n// import NoQuotesFound from \"./NoQuotesFound\";\nconst HighlightedQuote = (props) => {\n  const param=useParams();\n  const { text, author} = props.details;\n  return (\n    <figure className={classes.quote}>\n      <p>{text}</p>\n      <figcaption>{author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\quotes\\NoQuotesFound.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\pages\\AllQuotes.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\pages\\NewQuote.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\pages\\QuoteDetails.js",["94","95"],"import React ,{useEffect} from 'react'\r\nimport { Link, Route, useParams ,useRouteMatch } from 'react-router-dom';\r\nimport Comments from '../components/comments/Comments'\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport NoQuote from './NoQuote';\r\nimport { getSingleQuote } from '../lib/api';\r\nimport useHttp from '../hooks/use-http';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\n\r\nconst DUMMY=[\r\n    {id:'1',author:'redeye',text:\"Hi there\"},\r\n    {id:'2',author:'red',text:\"Hi here\"},\r\n    {id:'3',author:'eye',text:\"Hi \"}\r\n  ]\r\nfunction QuoteDetails(props) {\r\n    const param=useParams();\r\n    const match= useRouteMatch();\r\n    console.log(match);\r\n    const path=`${match.url}/comments`;\r\n    console.log(path);\r\n    const {sendRequest,status,data:responseData,error}=useHttp(getSingleQuote,true);\r\n    useEffect(() => {\r\n        sendRequest(param.quoteID);\r\n    }, [sendRequest])\r\n\r\n    console.log(\"[quoteDetails.js]\",responseData);\r\n    if (status==='pending'){\r\n        return <div style={{textAlign:'center'}}><LoadingSpinner/></div>\r\n    }\r\n    if (error){\r\n        return <p style={{textAlign:'center'}}>{error}</p>\r\n    }\r\n    // console.log(DUMMY.findIndex(quote=>quote.id===param.quoteID));\r\n    // const reqQuote=responseData.find(quote=>quote.id===param.quoteID);\r\n    if (!responseData.text){\r\n        return <NoQuote/>\r\n    }\r\n    return (\r\n        <>\r\n            <HighlightedQuote details={{author:responseData.author,text:responseData.text}}/>\r\n            <Route path={`${match.path}`} exact>\r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={path}>Load Comment</Link>\r\n                </div>\r\n            </Route>\r\n                \r\n            <Route path={path}>\r\n                <Comments id={param.quoteID}/>\r\n            </Route>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuoteDetails","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\comments\\Comments.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\comments\\NewCommentForm.js",["96"],"import { useRef, useState,useEffect } from 'react';\n\nimport classes from './NewCommentForm.module.css';\nimport { addComment } from '../../lib/api';\nimport useHttp from '../../hooks/use-http';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const commenterNameRef = useRef();\n  // const [submit,setSubmit]=useState(false)\n  const {sendRequest,status,error} =useHttp(addComment);\n  // console.log(submit,status);\n    \n  // if (submit){\n  //   sendRequest({name:commenterNameRef,comment:commentTextRef});\n  // }\n  const {refreshComments}  =props;\n  useEffect(()=>{\n    if (status==='completed' && !error){\n      refreshComments();\n    }\n  }, [ status, error,refreshComments])\n  if (status==='pending'){\n    return <div style={{textAlign:'center'}}><LoadingSpinner/></div>\n  }\n  if (status==='completed' && error){\n    alert(\"Failed to Add Comment!!!\")\n  }\n  \n  \n  // if (status ==='completed'){\n  //   setSubmit(false)\n  // }\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n    // console.log(commentTextRef.current.value);\n    // console.log(commenterNameRef.current.value);\n    // console.log(props.id);\n    const commenterName=commenterNameRef.current.value;\n    const commentText=commentTextRef.current.value;\n      sendRequest({commentData:{name:commenterName,comment:commentText},quoteID:props.id});\n    \n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='commenterName'>Your Name</label>\n        <input id='commenterName'  ref={commenterNameRef}/>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\layout\\MainNavigation.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\layout\\Layout.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\pages\\NoQuote.jsx",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\hooks\\use-http.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\lib\\api.js",["97","98"],"const FIREBASE_DOMAIN = 'https://react-router-project-8eaaf-default-rtdb.firebaseio.com';\n\n// export async function getAllQuotes() {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not fetch quotes.');\n//   }\n\n//   const transformedQuotes = [];\n\n//   for (const key in data) {\n//     const quoteObj = {\n//       id: key,\n//       ...data[key],\n//     };\n\n//     transformedQuotes.push(quoteObj);\n//   }\n\n//   return transformedQuotes;\n// }\n\n// export async function getSingleQuote(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not fetch quote.');\n//   }\n\n//   const loadedQuote = {\n//     id: quoteId,\n//     ...data,\n//   };\n\n//   return loadedQuote;\n// }\n\n// export async function addQuote(quoteData) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n//     method: 'POST',\n//     body: JSON.stringify(quoteData),\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not create quote.');\n//   }\n\n//   return null;\n// }\n\n// export async function addComment(requestData) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n//     method: 'POST',\n//     body: JSON.stringify(requestData.commentData),\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//   });\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not add comment.');\n//   }\n\n//   return { commentId: data.name };\n// }\n\n// export async function getAllComments(quoteId) {\n//   const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n//   const data = await response.json();\n\n//   if (!response.ok) {\n//     throw new Error(data.message || 'Could not get comments.');\n//   }\n\n//   const transformedComments = [];\n\n//   for (const key in data) {\n//     const commentObj = {\n//       id: key,\n//       ...data[key],\n//     };\n\n//     transformedComments.push(commentObj);\n//   }\n\n//   return transformedComments;\n// }\n\n\nexport const getAllQuotes = async () =>{\n    const response= await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n    const data= await response.json();\n    if (!response.ok){\n      throw new Error (\"Can't Load Quotes!!\");\n    }\n\n    const transformedQuotes=[]\n    for (let key in data){\n      const quote={\n        id:key,\n        ...data[key]\n      };\n      transformedQuotes.push(quote)\n    }\n    console.log(transformedQuotes);\n    return transformedQuotes\n}\nexport const getSingleQuote = async (quoteID) =>{\n  const response= await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteID}.json`);\n  const data= await response.json();\n  if (!response.ok){\n    throw new Error (\"Quote details not found!!\");\n  }\n\n  const quote={\n    id:quoteID,\n    ...data\n  }\n  return quote\n\n}\nexport const addQuote = async (quoteData) =>{\n  const response= await fetch(`${FIREBASE_DOMAIN}/quotes.json`,{\n    method:'POST',\n    body:JSON.stringify(quoteData),\n    headers:{'Content-Type':'application/json'}\n  });\n  const data= await response.json();\n  if (!response.ok){\n    throw new Error (\"Unable to add quote\");\n  }\n\n  return null\n}\nexport const addComment = async (commentObj) =>{\n  const {quoteID,commentData}=commentObj\n  console.log(quoteID,commentData);\n  const response= await fetch(`${FIREBASE_DOMAIN}/comments/${quoteID}.json`,{\n    method:'POST',\n    body:JSON.stringify(commentData),\n    headers: {\n            'Content-Type': 'application/json',\n          },\n  });\n  const data= await response.json();\n  if (!response.ok){\n    throw new Error (\"Unable to add comment\");\n  }\n  return null\n  }\nexport const getAllComments = async (quoteID) =>{\n  const response= await fetch(`${FIREBASE_DOMAIN}/comments/${quoteID}.json`);\n    const data= await response.json();\n    if (!response.ok){\n      throw new Error (\"Can't Load Comments\");\n    }\n\n    const transformedComments=[]\n    for (let key in data){\n      const comment={\n        id:key,\n        ...data[key]\n\n      }\n      transformedComments.push(comment);\n    }\n    console.log(\"[api.js.. getAllComments()..]\",transformedComments);\n  return transformedComments\n}","E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\comments\\CommentsList.js",[],"E:\\mission nov-fev\\javascript\\React\\PracticeProjects\\quotes-router-practice-starting-code\\src\\components\\comments\\CommentItem.js",["99","100"],"import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  const {text,auther} =props;\n  return (\n    <li className={classes.item}>\n      <div style={{display:'flex',textAlign:'center',justifyContent:'space-around'}}>\n\n      <p>{props.text}</p>\n      <p >{props.commenter}</p>\n      </div>\n    </li>\n  );\n};\n\nexport default CommentItem;\n",{"ruleId":"101","severity":1,"message":"102","line":2,"column":18,"nodeType":"103","messageId":"104","endLine":2,"endColumn":28},{"ruleId":"101","severity":1,"message":"105","line":6,"column":9,"nodeType":"103","messageId":"104","endLine":6,"endColumn":14},{"ruleId":"101","severity":1,"message":"106","line":10,"column":7,"nodeType":"103","messageId":"104","endLine":10,"endColumn":12},{"ruleId":"107","severity":1,"message":"108","line":24,"column":8,"nodeType":"109","endLine":24,"endColumn":21,"suggestions":"110"},{"ruleId":"101","severity":1,"message":"111","line":1,"column":18,"nodeType":"103","messageId":"104","endLine":1,"endColumn":26},{"ruleId":"101","severity":1,"message":"112","line":137,"column":9,"nodeType":"103","messageId":"104","endLine":137,"endColumn":13},{"ruleId":"101","severity":1,"message":"112","line":154,"column":9,"nodeType":"103","messageId":"104","endLine":154,"endColumn":13},{"ruleId":"101","severity":1,"message":"113","line":4,"column":10,"nodeType":"103","messageId":"104","endLine":4,"endColumn":14},{"ruleId":"101","severity":1,"message":"114","line":4,"column":15,"nodeType":"103","messageId":"104","endLine":4,"endColumn":21},"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'param' is assigned a value but never used.","'DUMMY' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'param.quoteID'. Either include it or remove the dependency array.","ArrayExpression",["115"],"'useState' is defined but never used.","'data' is assigned a value but never used.","'text' is assigned a value but never used.","'auther' is assigned a value but never used.",{"desc":"116","fix":"117"},"Update the dependencies array to be: [param.quoteID, sendRequest]",{"range":"118","text":"119"},[917,930],"[param.quoteID, sendRequest]"]